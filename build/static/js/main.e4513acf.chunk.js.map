{"version":3,"sources":["components/common/Loading.tsx","components/common/Spinner.tsx","components/todo/TodoService.tsx","components/todo/template/TodoTemplate.tsx","components/todo/template/head/TodoHead.tsx","components/todo/template/list/item/TodoItem.tsx","components/todo/template/list/TodoList.tsx","components/todo/template/create/TodoCreate.tsx","components/todo/template/footer/TodoFooter.tsx","components/todo/TodoContainer.tsx","App.tsx","index.js"],"names":["Loading","props","LoadingOutlined","style","fontSize","size","spin","StyledSpinnerWrapper","styled","Row","styleProps","Spinner","tip","delay","mask","className","justify","align","indicator","defaultProps","initialTodos","TodoTemplate","TodoTemplateBlock","children","React","memo","div","date","Date","options","year","month","day","TodoHead","today","toLocaleDateString","weekday","TodoHeadBlock","DateText","DayText","TodoItem","toggleTodo","removeTodo","todo","TodoItemBlock","CheckCircle","done","onClick","id","CheckOutlined","Text","text","expDate","Remove","DeleteOutlined","css","TodoList","todos","TodoListBlock","map","dateFormat","moment","format","TodoCreate","nextId","createTodo","incrementNextId","useState","open","setOpen","value","setValue","setDate","InsertFormPositioner","InsertForm","onSubmit","e","preventDefault","Modal","warning","title","content","InsertLayout","Input","autoFocus","placeholder","onChange","target","direction","defaultValue","dateObj","newDate","CircleButton","PlusCircleOutlined","button","form","input","Todofooter","undoneTasks","filter","TodoFooterBlock","LeftText","length","TodoContainer","todoState","setTodoState","nextIdState","setNextIdState","useEffect","loadData","saveData","data","localStorage","getItem","undefined","JSON","parse","setItem","stringify","checkedTodo","check","prevState","concat","useTodo","TodoFooter","App","GlobalStyle","createGlobalStyle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e4513acf.chunk.js","sourcesContent":["import React, { ReactElement } from 'react';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { SpinSize } from 'antd/lib/spin';\n\ninterface ILoadingProps {\n\tsize?: SpinSize;\n\tstyle?: React.CSSProperties;\n}\n\nexport default function Loading(props: ILoadingProps): ReactElement {\n\treturn <LoadingOutlined style={{ fontSize: props.size === 'large' ? 48 : 24, ...props.style }} spin />;\n}\n","import React, { ReactElement } from \"react\";\nimport styled from \"styled-components\";\nimport { Spin, Row, Col } from \"antd\";\nimport { SpinSize } from \"antd/lib/spin\";\n\nimport Loading from \"./Loading\";\n\ninterface ISpinnerProps {\n  tip?: string;\n  size?: SpinSize;\n  delay?: number;\n  style?: React.CSSProperties;\n  mask?: boolean;\n}\n\ninterface IWrapperProp {\n  readonly [\"data-mask\"]: boolean;\n}\n\nconst StyledSpinnerWrapper = styled(Row)<IWrapperProp>`\n  background-color: ${(styleProps) =>\n    styleProps[\"data-mask\"] ? \"rgba(0, 0, 0, 0.1)\" : \"transparent\"};\n`;\n\nfunction Spinner(props: ISpinnerProps): ReactElement {\n  const { tip, size, delay, style, mask = false } = props;\n\n  return (\n    <StyledSpinnerWrapper\n      className=\"spinner-wrap\"\n      justify=\"center\"\n      align=\"middle\"\n      style={style}\n      data-mask={mask}\n    >\n      <Col>\n        <Spin\n          indicator={<Loading size={size} />}\n          delay={delay}\n          tip={tip}\n          size={size}\n        />\n      </Col>\n    </StyledSpinnerWrapper>\n  );\n}\n\nSpinner.defaultProps = {\n  tip: \"로딩중입니다.\",\n  size: \"large\",\n  delay: 0,\n  style: {},\n  mask: false,\n};\n\nexport default Spinner;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect } from \"react\";\n\nexport type Itodo = {\n  id: number;\n  text: string;\n  done: boolean;\n  expDate: string;\n};\n\nlet initialTodos: Itodo[] = [];\n\nexport const useTodo = () => {\n  const [todoState, setTodoState] = useState(initialTodos);\n  const [nextIdState, setNextIdState] = useState(0);\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  useEffect(() => {\n    saveData();\n  }, [todoState]);\n\n  const incrementNextId = () => {\n    if (!nextIdState) {\n      setNextIdState(nextIdState + 1);\n    }\n  };\n\n  const toggleTodo = (id: number) => {\n    const checkedTodo = todoState.map((check) => ({\n      ...check,\n      done: check.id === id ? !check.done : check.done,\n    }));\n    setTodoState(checkedTodo);\n  };\n\n  const removeTodo = (id: number) => {\n    setTodoState((prevState) =>\n      prevState.filter((todo: Itodo) => todo.id !== id)\n    );\n  };\n\n  const createTodo = (todo: Itodo) => {\n    const nextId = todoState.length\n      ? todoState[todoState.length - 1].id + 1\n      : todoState.length + 1;\n    setTodoState((prevState) =>\n      prevState.concat({\n        ...todo,\n        id: nextId,\n      })\n    );\n  };\n\n  const loadData = () => {\n    let data = localStorage.getItem(\"todos\");\n    if (data === undefined) data = \"\";\n    initialTodos = JSON.parse(data!);\n    if (initialTodos && initialTodos.length >= 1) {\n      incrementNextId();\n    }\n\n    setTodoState(initialTodos);\n  };\n\n  const saveData = () => {\n    localStorage.setItem(\"todos\", JSON.stringify(todoState));\n  };\n\n  return {\n    todoState,\n    nextIdState,\n    incrementNextId,\n    toggleTodo,\n    removeTodo,\n    createTodo,\n  };\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nfunction TodoTemplate(props: any) {\n  return <TodoTemplateBlock>{props.children}</TodoTemplateBlock>;\n}\n\nexport default React.memo(TodoTemplate);\n\nconst TodoTemplateBlock = styled.div`\n  width: 70%;\n  height: 800px;\n\n  min-width: 360px;\n  max-width: 700px;\n\n  position: relative;\n  background: white;\n  border-radius: 30px;\n  box-shadow: 0 0 50px 0 rgba(0, 0, 0, 0.1);\n\n  margin: 0 auto;\n\n  margin-top: 96px;\n  margin-bottom: 32px;\n  display: flex;\n  flex-direction: column;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface DateTimeFormatOptions {\n  year?: \"numeric\" | \"2-digit\";\n  month?: \"numeric\" | \"2-digit\" | \"long\" | \"short\" | \"narrow\";\n  day?: \"numeric\" | \"2-digit\";\n}\n\nconst date: Date = new Date();\nconst options: DateTimeFormatOptions = {\n  year: \"2-digit\",\n  month: \"2-digit\",\n  day: \"numeric\",\n};\n\nconst TodoHead = () => {\n  const today = date.toLocaleDateString(\"ko-Kr\", options);\n  const weekday = date.toLocaleDateString(\"ko-Kr\", { weekday: \"long\" });\n\n  return (\n    <TodoHeadBlock>\n      <DateText>{today}</DateText>\n      <DayText>{weekday}</DayText>\n    </TodoHeadBlock>\n  );\n};\n\nexport default React.memo(TodoHead);\n\nconst TodoHeadBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 52px;\n  padding-bottom: 24px;\n  border-bottom: 3px solid #33bb77;\n`;\n\nconst DateText = styled.div`\n  font-size: 26px;\n  color: #119955;\n  padding-left: 10px;\n`;\n\nconst DayText = styled.div`\n  font-size: 22px;\n  font-weight: bold;\n  color: #119955;\n  padding-top: 5px;\n`;\n","import { CheckOutlined, DeleteOutlined } from \"@ant-design/icons\";\nimport { Itodo } from \"components/todo/TodoService\";\nimport React from \"react\";\nimport styled, { css } from \"styled-components\";\n\ninterface TodoItemProps {\n  toggleTodo: (id: number) => void;\n  removeTodo: (id: number) => void;\n  todo: Itodo;\n}\n\nconst TodoItem = ({ toggleTodo, removeTodo, todo }: TodoItemProps) => {\n  const handleToggle = () => {\n    toggleTodo(todo.id);\n  };\n\n  const handleRemove = () => {\n    removeTodo(todo.id);\n  };\n\n  return (\n    <TodoItemBlock>\n      <CheckCircle done={todo.done} onClick={handleToggle}>\n        {todo.done && <CheckOutlined />}\n      </CheckCircle>\n      <Text done={todo.done}>{todo.text}</Text>\n      <Text done={todo.done}>\n        {todo.expDate}&nbsp;\n        <strong>만료</strong>\n      </Text>\n      <Remove onClick={handleRemove}>\n        <DeleteOutlined />\n      </Remove>\n    </TodoItemBlock>\n  );\n};\n\nexport default React.memo(TodoItem);\n\nconst Remove = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #119955;\n  font-size: 16px;\n`;\n\nconst TodoItemBlock = styled.div`\n  display: flex;\n  align-items: center;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  &:hover {\n    ${Remove} {\n      display: initial;\n    }\n  }\n`;\n\nconst CheckCircle = styled.div<{ done: boolean }>`\n  width: 20px;\n  height: 20px;\n  border-radius: 16px;\n  border: 1px solid #33bb77;\n  font-size: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 20px;\n  cursor: pointer;\n  ${(props) =>\n    props.done &&\n    css`\n      border: 1px solid #dddddd;\n      color: #dddddd;\n    `}\n`;\n\nconst Text = styled.div<{ done: boolean }>`\n  flex: 1;\n  font-size: 16px;\n  ${(props) =>\n    props.done &&\n    css`\n      color: #ced4da;\n      text-decoration: line-through;\n    `}\n`;\n","import { Itodo } from \"components/todo/TodoService\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport TodoItem from \"./item/TodoItem\";\n\ninterface TodoListProps {\n  todos: Itodo[];\n  toggleTodo: (id: number) => void;\n  removeTodo: (id: number) => void;\n}\n\nconst TodoList = ({ toggleTodo, removeTodo, todos }: TodoListProps) => {\n  return (\n    <TodoListBlock>\n      {todos?.map((todo) => (\n        <TodoItem\n          toggleTodo={toggleTodo}\n          removeTodo={removeTodo}\n          key={todo.id}\n          todo={todo}\n        />\n      ))}\n    </TodoListBlock>\n  );\n};\n\nexport default React.memo(TodoList);\n\nconst TodoListBlock = styled.div`\n  flex: 1;\n  padding: 20px 32px;\n  padding-bottom: 48px;\n  overflow-y: auto;\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\nimport { DatePicker, Space, Modal } from \"antd\";\nimport moment from \"moment\";\nimport { Itodo } from \"components/todo/TodoService\";\n\ninterface TodoCreateProps {\n  nextId: number;\n  createTodo: (todo: Itodo) => void;\n  incrementNextId: () => void;\n}\nconst dateFormat = \"YYYY-MM-DD\";\nconst today = moment().format(dateFormat);\nconst TodoCreate = ({\n  nextId,\n  createTodo,\n  incrementNextId,\n}: TodoCreateProps) => {\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState(\"\");\n  const [date, setDate] = useState(today);\n\n  const handleToggle = () => setOpen(!open);\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setValue(e.target.value);\n\n  //DatePicker\n  const handleDateChange = (dateObj: any): void => {\n    const newDate = dateObj.format(dateFormat);\n    setDate(newDate);\n  };\n\n  //Modal\n  const Warning = () => {\n    Modal.warning({\n      title: \"todo를 작성해 주세요\",\n      content: \"todo를 작성해 주세요\",\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault(); // 새로고침 방지\n    if (value === \"\") {\n      Warning();\n    } else {\n      createTodo({\n        id: nextId,\n        text: value,\n        done: false,\n        expDate: date,\n      });\n      incrementNextId(); // nextId 하나 증가\n      setValue(\"\"); // input 초기화\n      setOpen(false); // open 닫기\n    }\n  };\n\n  return (\n    <>\n      <InsertFormPositioner>\n        <InsertForm onSubmit={handleSubmit}>\n          <InsertLayout>\n            <Input\n              autoFocus\n              placeholder=\"What's nexed to be done?\"\n              onChange={handleChange}\n              value={value}\n            />\n            <span>만료일 지정</span>\n            <Space direction=\"vertical\" size={16}>\n              <DatePicker\n                defaultValue={moment(date)}\n                onChange={handleDateChange}\n              />\n            </Space>\n          </InsertLayout>\n          <CircleButton onClick={handleToggle} open={open}>\n            <PlusCircleOutlined />\n          </CircleButton>\n        </InsertForm>\n      </InsertFormPositioner>\n    </>\n  );\n};\n\nexport default React.memo(TodoCreate);\n\nconst CircleButton = styled.button<{ open: boolean }>`\n  background: #33bb77;\n  width: 50px;\n  height: 50px;\n  align-items: center;\n  justify-content: center;\n  font-size: 60px;\n  left: 50%;\n  transform: translate(50%, 0%);\n  color: white;\n  border-radius: 50%;\n  border: none;\n  outline: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst InsertFormPositioner = styled.div`\n  width: 100%;\n  border-bottom: 1px solid #eeeeee;\n`;\n\nconst InsertForm = styled.form`\n  display: flex;\n  justify-content: center;\n  background: #eeeeee;\n  padding-left: 40px;\n  padding-top: 36px;\n  padding-right: 60px;\n  padding-bottom: 36px;\n`;\n\nconst InsertLayout = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  > span {\n    font-weight: bold;\n  }\n`;\n\nconst Input = styled.input`\n  padding: 12px;\n  border: 1px solid #dddddd;\n  width: 100%;\n  outline: none;\n  font-size: 21px;\n  box-sizing: border-box;\n  color: #119955;\n  &::placeholder {\n    color: #dddddd;\n    font-size: 16px;\n  }\n`;\n","import { Itodo } from \"components/todo/TodoService\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\ninterface HooksTodoHeadProps {\n  todos: Itodo[];\n}\n\nconst Todofooter = ({ todos }: HooksTodoHeadProps) => {\n  const undoneTasks = todos.filter((todo) => !todo.done);\n  return (\n    <TodoFooterBlock>\n      <LeftText className=\"tasks-left\">\n        {undoneTasks.length} items left\n      </LeftText>\n    </TodoFooterBlock>\n  );\n};\n\nexport default React.memo(Todofooter);\n\nconst TodoFooterBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: 24px;\n  padding-bottom: 24px;\n`;\n\nconst LeftText = styled.div`\n  color: #33bb77;\n  font-size: 18px;\n`;\n","import React from \"react\";\nimport { useTodo } from \"./TodoService\";\nimport TodoTemplate from \"./template/TodoTemplate\";\nimport TodoHead from \"./template/head/TodoHead\";\nimport TodoList from \"./template/list/TodoList\";\nimport TodoCreate from \"./template/create/TodoCreate\";\nimport TodoFooter from \"./template/footer/TodoFooter\";\n\nconst TodoContainer = () => {\n  const {\n    todoState,\n    nextIdState,\n    incrementNextId,\n    toggleTodo,\n    removeTodo,\n    createTodo,\n  } = useTodo();\n\n  return (\n    <>\n      <TodoTemplate>\n        <TodoHead />\n        <TodoCreate\n          nextId={nextIdState}\n          createTodo={createTodo}\n          incrementNextId={incrementNextId}\n        />\n        <TodoList\n          toggleTodo={toggleTodo}\n          removeTodo={removeTodo}\n          todos={todoState}\n        />\n        <TodoFooter todos={todoState} />\n      </TodoTemplate>\n    </>\n  );\n};\n\nexport default TodoContainer;\n","import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport Spinner from \"./components/common/Spinner\";\nimport TodoContainer from \"./components/todo/TodoContainer\";\n\nfunction App() {\n  //@TODO login\n  let isLogged = true;\n\n  const RenderLayout = (\n    <div>\n      <TodoContainer />\n    </div>\n  );\n\n  return isLogged ? RenderLayout : <Spinner mask />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createGlobalStyle } from \"styled-components\";\nimport App from \"./App\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #eeeeee;\n  }\n`;\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}